// C program for Merge Sort
#include <stdio.h>
#include <stdlib.h>

// Merges two subarrays of arr[].
// First subarray is arr[l..m]
// Second subarray is arr[m+1..r]
void merge(int a[], int l, int m, int r)
{
	int i = l;
	int j = m+1;
	int k = l;
	int b[r+1];
	while(i<=m && j<=r){
	    if(a[i]<=a[j]){
	        b[k]=a[i];
	        i++;
	        k++;
	        
	    }
	    else{
	        b[k]=a[j];
	        j++;
	        k++;
	    }
	}
	if(i>m){
	    while(j<=r){
	        b[k]=a[j];
	        j++;
	        k++;
	    }
	}
	else{
	    while(i<=m){
	        b[k]=a[i];
	        i++;
	        k++;
	    }
	}
	for(k=l;k<=r;k++){
	    a[k]=b[k];
	}
}

// l is for left index and r is right index of the
// sub-array of arr to be sorted
void mergeSort(int arr[], int l, int r)
{
	if (l < r) {
		int m = (l+r)/ 2;

		// Sort first and second halves
		mergeSort(arr, l, m);
		mergeSort(arr, m + 1, r);

		merge(arr, l, m, r);
	}
}

// Function to print an array
void printArray(int A[], int size)
{
	int i;
	for (i = 0; i < size; i++)
		printf("%d ", A[i]);
	printf("\n");
}

// Driver code
int main()
{
	int a[] = { 12, 11, 13, 5, 6, 7 };
	int arr_size = sizeof(a) / sizeof(a[0]);

	printf("Given array is \n");
	printArray(a, arr_size);

	mergeSort(a, 0, arr_size - 1);

	printf("\nSorted array is \n");
	printArray(a, arr_size);
	return 0;
}
